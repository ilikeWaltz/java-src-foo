https://plumbr.io/handbook/what-is-garbage-collection

-------------------------------------- Q & A
what is memory leak?
what is garbage collection?


-------------------------------------- GC Algorithms
Reference Counting 
Mark and Sweep



-------------------------------------- Mark and Sweep

------------- Stop The World pause
The not-so-good thing is that the application threads need to be stopped for the collection to happen, as you cannot really count references if they keep changing all the time. 
Such a situation when the application is temporarily stopped so that the JVM can indulge in housekeeping activities is called a Stop The World pause. 
They may happen for many reasons, but garbage collection is by far the most popular one.

------------- Fragmenting and Compacting

Whenever sweeping takes place, the JVM has to make sure the areas filled with unreachable objects can be reused. 
This can (and eventually will) lead to memory fragmentation which, similarly to disk fragmentation, leads to two problems:

	1. Write operations become more time-consuming as finding the next free block of sufficient size is no longer a trivial operation.
	2. When creating new objects, JVM is allocating memory in contiguous blocks. So if fragmentation escalates to a point where no individual free fragment is large enough to accommodate the newly created object, an allocation error occurs.
	
To avoid such problems, the JVM is making sure the fragmenting does not get out of hand. 
So instead of just marking and sweeping, a 'memory defrag' process also happens during garbage collection. 
This process relocates all the reachable objects next to each other, eliminating (or reducing) the fragmentation. 



-------------------------------------- Generational Hypothesis

As we have mentioned before, doing a garbage collection entails stopping the application completely. 
It is also quite obvious that the more objects there are the longer it takes to collect all the garbage. 
But what if we would have a possibility to work with smaller memory regions? 
Investigating the possibilities, a group of researchers has observed that most allocations inside applications fall into two categories:

	1. Most of the objects become unused quickly
	2. The ones that do not usually survive for a (very) long time

These observations come together in the Weak Generational Hypothesis. 
Based on this hypothesis, the memory inside the VM is divided into what is called the Young Generation and the Old Generation. The latter is sometimes also called Tenured.

Young Generation
Old Generation (Tenured)

-------------------------------------- 
-------------------------------------- 
-------------------------------------- 


